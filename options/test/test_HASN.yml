# general settings
name: test_HASN
model_type: SRModel
scale: 4
num_gpu: 1
manual_seed: 0


# dataset and data loader settings
datasets:
  test_1:
    name: Set5
    type: PairedImageDataset
    dataroot_gt: datasets/test_datasets/Set5/GTmod12
    dataroot_lq: datasets/test_datasets/Set5/LRbicx4
    io_backend:
      type: disk
      
  test_2:
    name: Set14
    type: PairedImageDataset
    dataroot_gt: datasets/test_datasets/Set14/GTmod12
    dataroot_lq: datasets/test_datasets/Set14/LRbicx4
    io_backend:
      type: disk

  test_3:
    name: BSD100
    type: PairedImageDataset
    dataroot_gt: datasets/test_datasets/BSD100/BSDS100_GT
    dataroot_lq: datasets/test_datasets/BSD100/BSDS100_bicx4
    io_backend:
      type: disk

  test_4:
    name: urban100
    type: PairedImageDataset
    dataroot_gt: datasets/test_datasets/urban100/urban100_GT
    dataroot_lq: datasets/test_datasets/urban100/urban100_bicx4
    io_backend:
      type: disk

  test_5:
    name: manga109
    type: PairedImageDataset
    dataroot_gt: datasets/test_datasets/manga109/manga109_GT
    dataroot_lq: datasets/test_datasets/manga109/manga109_bicx4
    io_backend:
      type: disk

# network structures
network_g:
  type: HASN
  upscale: 4


# path
path:
  pretrain_network_g: experiments/HASN.pth
  strict_load_g: true
  resume_state: ~


# validation settings
val:
  # val_freq: !!float 5e3
  save_img: false
  suffix: ~

  metrics:
    psnr: # metric name, can be arbitrary
      type: calculate_psnr
      crop_border: 4
      test_y_channel: true

    ssim: # metric name, can be arbitrary
      type: calculate_ssim
      crop_border: 4
      test_y_channel: true

